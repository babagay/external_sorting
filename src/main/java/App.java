import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ForkJoinPool;

/**
 * Еще одна попытка реализовать внешнюю сортировку.
 * 	Вариант 1 - индекс
 * 	 Многопоточно найти начала строк, построив индекс (массив указателей на начала строк).
 * 	 Отсортировать индекс.
 * 	 Записать выходной файл, пробежав по созданному индексу.
 *
 * 	Вариант 2 - внешняя сортировка слиянием
 * 		Создаем потоки-воркеры.
 * 		Начинаем дробление в главном потоке (или не в главном?).
 * 		Далее, появился новый кусок. Кладем его имя в очередь.
 * 		Воркер должен каким-то образом увидеть, что в очереди есть таск.
 * 			Нужен механизм периодического опроса очереди либо отправка сигнала воркерам:
 * 				ОЧЕРЕДЬ НЕ ПУСТАЯ (В ОЧЕРЕДИ ЕСТЬ ТАСК)
 * 			воркеры будут биться за право вытащить из очереди айтем.
 * 				Как это разрулить?
 * 		Воркер вынимает имя куска из очереди и начинает его сортировать.
 * 			Кладет отсортированный кусок в другую папку.
 * 		Далее, должен поступить сигнал:
 * 			ДРОБЛЕНИЕ ЗАВЕРШЕНО, КОЛИЧЕСТВО КУСКОВ: 4 - это значит, можно переходить в след фазу
 * 		По завершении сортировки воркер инкрементирует некое поле, напр, sortedPiecesNumber
 * 			которое учитывает количество отсортированных кусков
 * 			Где это поле ,в каком классе?
 * 		Далее, должен быть поток, который мониторит sortedPiecesNumber
 * 			и, как только, это поле примет значение 4,
 * 			можно инициировать следующую (завершающую фазу).
 * 			Ведь, к этому моменту у нас должно быть количество кусков, полученное из события ДРОБЛЕНИЕ ЗАВЕРШЕНО.
 * 		На последнем этапе нужно смерджить куски.
 * 			Для этого надо заиспользовать сортировку слияния.
 * 			[!]	В основном идея состоит в том, чтобы разбить файл на более мелкие части,
 * 			отсортировать их (напр, с помощью сортировки слияния),
 * 			а затем использовать Merge из merge-sort для создания нового, отсортированного файла.
 * 		Предположительно, нужно сперва отдельно отсортирвать каждую часть (и сохранить в файл).
 * 			А потом выполнить Нисходящее сбалансированное слияние всех частей.
 *
 * 	https://habr.com/ru/post/281675/ - Сортировка слиянием по-простому
 * 	https://habr.com/ru/company/edison/blog/432646/ - Сбалансированное слияние
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {


        ForkJoinPool forkJoinPool = new ForkJoinPool();

        Map map = new HashMap();

        System.out.println("Foo");
    }
}
